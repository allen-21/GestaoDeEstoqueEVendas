/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package View;

import Controller.ItensVendaController;
import Controller.ProdutoController;
import Controller.VendaController;
import Model.Dao.ItensVendaDao;
import Model.Dao.ProdutoDAO;
import Model.Dao.VendaDao;
import Model.ItemVenda;
import Model.Produto;
import Model.Usuario;
import Model.Venda;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anibal
 */
public class VendasRealizadas extends javax.swing.JInternalFrame {

    /**
     * Creates new form RelatorioVenda
     */
    public VendasRealizadas() {
        initComponents();
        verDadosVenda();
        verDadosItens();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Usuario = new javax.swing.JLabel();
        btnPesquisar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vendasTabela = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        itensVendaTabela = new javax.swing.JTable();
        txtUser = new javax.swing.JTextField();

        Usuario.setText("Digite o Nome do funcionario ");

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        jLabel3.setText("Vendas ");

        vendasTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Data", "Funcionario", "Total itens", "Subtotal", "PG Dinheiro", "PG Cartão", "Troco"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vendasTabela.setPreferredSize(new java.awt.Dimension(225, 400));
        vendasTabela.getTableHeader().setReorderingAllowed(false);
        vendasTabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vendasTabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(vendasTabela);

        jLabel4.setText("Itens Da Venda");

        itensVendaTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id do Item", "Id do Produto", "Nome Produto", "Quantidade", "Valor Unitário", "Valor Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itensVendaTabela.setPreferredSize(new java.awt.Dimension(225, 400));
        itensVendaTabela.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(itensVendaTabela);

        txtUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUserKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(btnPesquisar))
                            .addComponent(Usuario))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Usuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private DefaultTableModel tableModel;
    private DefaultTableModel tableMode2;
//LIMPA TABELA DE VENDAS

    public void tableModelLimpar() {

        if (tableModel == null) {
            //Obtém a tabela para trabalhar nela
            tableModel = (DefaultTableModel) vendasTabela.getModel();
        }
        //Limpa resultados anteriores
        tableModel.setRowCount(0);
    }

    //PESQUISAR PRODUTO
    public void pesquisar() {

        List<Venda> resultado = VendaController.procurar(
                txtUser.getText());

        //Obtém a tabela para trabalhar nela
        tableModel = (DefaultTableModel) vendasTabela.getModel();

        //Limpa resultados anteriores
        tableModel.setRowCount(0);

        if (resultado != null && resultado.size() > 0) {
            //Percorre a lista de resultados e os adiciona na tabela
            for (int i = 0; i < resultado.size(); i++) {

                //Obtém cada item da lista de resultados
                Venda venda = resultado.get(i);

                if (venda != null) {
                    //Cria arrai com resultados
                    Object[] dadosTabela = new Object[8];
                    //Cada dado na coluna correspondente
                    dadosTabela[0] = venda.getId();
                    dadosTabela[1] = venda.getDataString();
                    dadosTabela[2] = venda.getUsuario().getUser();
                    dadosTabela[3] = venda.getQtdItens();
                    dadosTabela[4] = venda.getSubtotal();
                    dadosTabela[5] = venda.getPagamentoDinheiro();
                    dadosTabela[6] = venda.getPagamentoCartao();
                    dadosTabela[7] = (venda.getPagamentoDinheiro() + venda.getPagamentoCartao()) - venda.getSubtotal();

                    //Adiciona a linha de dados na tabela
                    tableModel.addRow(dadosTabela);
                }
            }
        } else {

            //Caso a pesquisa não tenha retornado resultados
            JOptionPane.showMessageDialog(rootPane,
                    "Não existem resultados para a sua pesquisa!",
                    "Não há dados",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //Exibir vendas 
     public void verDadosVenda()  {
         DefaultTableModel tableModel = (DefaultTableModel) vendasTabela.getModel();
        
        VendaDao vdas = new VendaDao();
       
        tableModel.setNumRows(0);
       
        for (Venda v: vdas.listartb()){
                
                tableModel.addRow(new Object[]{
                    
                   v.getId(),
                    v.getData(),
                    v.getUsuario().getUser(),
                    v.getQtdItens(),
                    v.getSubtotal(),
                    v.getPagamentoDinheiro(),
                    v.getPagamentoCartao()
                 
                        
                        
                });
            }
     }
     //Exibir vendas 
     public void verDadosItens()  {
         DefaultTableModel tableModel = (DefaultTableModel) itensVendaTabela.getModel();
        
        ItensVendaDao ivdas = new ItensVendaDao();
       
        tableModel.setNumRows(0);
       
        for (ItemVenda iv: ivdas.listartb()){
                
                tableModel.addRow(new Object[]{
                    
                  iv.getIdItem(),
                    iv.getId(),
                    iv.getNome(),
                    iv.getQuantidade(),
                    iv.getValor(),
                    iv.getValorTotal()
                 
                        
                        
                });
            }
     }
       

    //VER DETALHES DA VENDA
    public void detalhesVenda() {
        //obtem a linha da tabela
        Integer row = vendasTabela.getSelectedRow();

        //obtem o id dessa linha
        Integer idVenda = (Integer) vendasTabela.getValueAt(row, 0);

        List<ItemVenda> resultado = ItensVendaController.obterItens(idVenda);

        //Obtém a tabela para trabalhar nela
        tableMode2 = (DefaultTableModel) itensVendaTabela.getModel();

        //Limpa resultados anteriores
        tableMode2.setRowCount(0);

        if (resultado != null && resultado.size() > 0) {
            //Percorre a lista de resultados e os adiciona na tabela
            for (int i = 0; i < resultado.size(); i++) {

                //Obtém cada item da lista de resultados
                ItemVenda itemVenda = resultado.get(i);

                if (itemVenda != null) {
                    //Cria arrai com resultados
                    Object[] dadosTabela = new Object[6];
                    //Cada dado na coluna correspondente
                    dadosTabela[0] = itemVenda.getIdItem();
                    dadosTabela[1] = itemVenda.getId();
                    dadosTabela[2] = itemVenda.getNome();
                    dadosTabela[3] = itemVenda.getQuantidade();
                    dadosTabela[4] = itemVenda.getValor();
                    dadosTabela[5] = itemVenda.getValorTotal();

                    //Adiciona a linha de dados na tabela
                    tableMode2.addRow(dadosTabela);
                }
            }
        } else {

            //Caso não tenha retornado resultados
            JOptionPane.showMessageDialog(rootPane,
                    "Não existem resultados para esta venda!",
                    "Não há dados",
                    JOptionPane.ERROR_MESSAGE);
        }
    }


    private void vendasTabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vendasTabelaMouseClicked
        detalhesVenda();
    }//GEN-LAST:event_vendasTabelaMouseClicked

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        // TODO add your handling code here:
        pesquisar();
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void txtUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserKeyReleased
        // TODO add your handling code here:
        pesquisar();
    }//GEN-LAST:event_txtUserKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Usuario;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JTable itensVendaTabela;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtUser;
    private javax.swing.JTable vendasTabela;
    // End of variables declaration//GEN-END:variables
}
